{"ast":null,"code":"var _class;\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/button\";\nimport * as i3 from \"@angular/material/icon\";\nimport * as i4 from \"@angular/material/grid-list\";\nexport class TaskFormComponent {\n  constructor(fb) {\n    this.fb = fb;\n  }\n  ngOnInit() {\n    this.initForm();\n  }\n  initForm() {\n    this.taskForm = this.fb.group({\n      titulo: ['', [Validators.required]],\n      descripcion: ['', [Validators.required, Validators.maxLength(100)]]\n    });\n  }\n}\n_class = TaskFormComponent;\n_class.ɵfac = function TaskFormComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-task-form\"]],\n  decls: 20,\n  vars: 3,\n  consts: [[1, \"form-group\"], [\"cols\", \"12\", \"rowHeight\", \"50px\"], [3, \"colspan\"], [2, \"display\", \"grid\"], [\"for\", \"titulo\"], [\"type\", \"text\", \"id\", \"titulo\", \"name\", \"titulo\", \"required\", \"\", 1, \"form-input-theme\"], [\"cols\", \"12\", \"rowHeight\", \"150px\"], [\"for\", \"descripcion\"], [\"id\", \"descripcion\", \"name\", \"descripcion\", \"rows\", \"3\", \"maxlength\", \"100\", \"required\", \"\", 1, \"textarea-no-resize\"], [\"mat-fab\", \"\", \"extended\", \"\", 1, \"atom-button\"], [1, \"material-symbols-outlined\"]],\n  template: function TaskFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"mat-grid-list\", 1)(2, \"mat-grid-tile\", 2)(3, \"div\", 3)(4, \"label\", 4);\n      i0.ɵɵtext(5, \"T\\u00EDtulo:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 5);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(7, \"mat-grid-list\", 6)(8, \"mat-grid-tile\", 2)(9, \"div\", 3)(10, \"label\", 7);\n      i0.ɵɵtext(11, \"Descripci\\u00F3n (m\\u00E1ximo 100 caracteres):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"textarea\", 8);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(13, \"mat-grid-list\", 1)(14, \"mat-grid-tile\", 2)(15, \"button\", 9)(16, \"mat-icon\")(17, \"span\", 10);\n      i0.ɵɵtext(18, \" save \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtext(19, \" Guardar \");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"colspan\", 12);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"colspan\", 12);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"colspan\", 12);\n    }\n  },\n  dependencies: [i2.MatFabButton, i3.MatIcon, i4.MatGridList, i4.MatGridTile],\n  styles: [\".form-input-theme[_ngcontent-%COMP%] {\\n    border-color: linear-gradient(70deg, #FF8D3B, #FF6250) !important;\\n    background: transparent;\\n    border-radius: 4px;\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdGFza3MvdGFzay1mb3JtL3Rhc2stZm9ybS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksaUVBQWlFO0lBQ2pFLHVCQUF1QjtJQUN2QixrQkFBa0I7QUFDdEIiLCJzb3VyY2VzQ29udGVudCI6WyIuZm9ybS1pbnB1dC10aGVtZSB7XHJcbiAgICBib3JkZXItY29sb3I6IGxpbmVhci1ncmFkaWVudCg3MGRlZywgI0ZGOEQzQiwgI0ZGNjI1MCkgIWltcG9ydGFudDtcclxuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"names":["Validators","TaskFormComponent","constructor","fb","ngOnInit","initForm","taskForm","group","titulo","required","descripcion","maxLength","i0","ɵɵdirectiveInject","i1","FormBuilder","selectors","decls","vars","consts","template","TaskFormComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵproperty"],"sources":["E:\\Desarrollo de software\\Repositorios\\AtomChallenge\\Frontend\\toDoFront\\src\\app\\tasks\\task-form\\task-form.component.ts","E:\\Desarrollo de software\\Repositorios\\AtomChallenge\\Frontend\\toDoFront\\src\\app\\tasks\\task-form\\task-form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-task-form',\n  templateUrl: './task-form.component.html',\n  styleUrls: ['./task-form.component.css']\n})\nexport class TaskFormComponent implements OnInit{\n  taskForm!: FormGroup;\n\n  constructor(private fb: FormBuilder) {\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  initForm(){\n    this.taskForm = this.fb.group({\n      titulo: ['', [Validators.required]],\n      descripcion: ['', [Validators.required, Validators.maxLength(100)]]\n    });\n  }\n  \n}\n","<form class=\"form-group\">\n    <mat-grid-list cols=\"12\" rowHeight=\"50px\">\n        <mat-grid-tile [colspan]=\"12\">\n            <div style=\"display: grid;\">\n                <label for=\"titulo\" >Título:</label>\n                <input type=\"text\" class=\"form-input-theme\" id=\"titulo\" name=\"titulo\" required>\n            </div>\n        </mat-grid-tile>\n    </mat-grid-list>\n    <mat-grid-list cols=\"12\" rowHeight=\"150px\">\n        <mat-grid-tile [colspan]=\"12\">\n            <div style=\"display: grid;\">\n                <label for=\"descripcion\">Descripción (máximo 100 caracteres):</label>\n                <textarea id=\"descripcion\" class=\"textarea-no-resize\" name=\"descripcion\" rows=\"3\" maxlength=\"100\" required></textarea>\n            </div>\n        </mat-grid-tile>\n    </mat-grid-list>\n    <mat-grid-list cols=\"12\" rowHeight=\"50px\">\n        <mat-grid-tile [colspan]=\"12\">\n            <button  mat-fab extended class=\"atom-button\">\n                <mat-icon>\n                    <span class=\"material-symbols-outlined\">\n                        save\n                    </span>\n                </mat-icon>\n                Guardar\n              </button>\n        </mat-grid-tile>\n    </mat-grid-list>\n</form>"],"mappings":";AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;AAOnE,OAAM,MAAOC,iBAAiB;EAG5BC,YAAoBC,EAAe;IAAf,KAAAA,EAAE,GAAFA,EAAE;EACtB;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACC,QAAQ,EAAE;EACjB;EAEAA,QAAQA,CAAA;IACN,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MAC5BC,MAAM,EAAE,CAAC,EAAE,EAAE,CAACR,UAAU,CAACS,QAAQ,CAAC,CAAC;MACnCC,WAAW,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACW,SAAS,CAAC,GAAG,CAAC,CAAC;KACnE,CAAC;EACJ;;SAfWV,iBAAiB;;mBAAjBA,MAAiB,EAAAW,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA;AAAA;;QAAjBd,MAAiB;EAAAe,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCR9BV,EAAA,CAAAY,cAAA,cAAyB;MAIYZ,EAAA,CAAAa,MAAA,mBAAO;MAAAb,EAAA,CAAAc,YAAA,EAAQ;MACpCd,EAAA,CAAAe,SAAA,eAA+E;MACnFf,EAAA,CAAAc,YAAA,EAAM;MAGdd,EAAA,CAAAY,cAAA,uBAA2C;MAGNZ,EAAA,CAAAa,MAAA,sDAAoC;MAAAb,EAAA,CAAAc,YAAA,EAAQ;MACrEd,EAAA,CAAAe,SAAA,mBAAsH;MAC1Hf,EAAA,CAAAc,YAAA,EAAM;MAGdd,EAAA,CAAAY,cAAA,wBAA0C;MAKtBZ,EAAA,CAAAa,MAAA,cACJ;MAAAb,EAAA,CAAAc,YAAA,EAAO;MAEXd,EAAA,CAAAa,MAAA,iBACF;MAAAb,EAAA,CAAAc,YAAA,EAAS;;;MAxBAd,EAAA,CAAAgB,SAAA,GAAc;MAAdhB,EAAA,CAAAiB,UAAA,eAAc;MAQdjB,EAAA,CAAAgB,SAAA,GAAc;MAAdhB,EAAA,CAAAiB,UAAA,eAAc;MAQdjB,EAAA,CAAAgB,SAAA,GAAc;MAAdhB,EAAA,CAAAiB,UAAA,eAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}