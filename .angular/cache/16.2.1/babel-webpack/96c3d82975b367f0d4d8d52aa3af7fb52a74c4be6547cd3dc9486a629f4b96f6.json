{"ast":null,"code":"var _class;\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/card\";\nimport * as i3 from \"@angular/material/button\";\nimport * as i4 from \"@angular/material/icon\";\nimport * as i5 from \"@angular/material/grid-list\";\nexport class TaskFormComponent {\n  constructor(fb) {\n    this.fb = fb;\n  }\n  ngOnInit() {\n    this.initForm();\n  }\n  initForm() {\n    this.taskForm = this.fb.group({\n      titulo: ['', [Validators.required]],\n      descripcion: ['', [Validators.required, Validators.maxLength(100)]]\n    });\n  }\n}\n_class = TaskFormComponent;\n_class.ɵfac = function TaskFormComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-task-form\"]],\n  decls: 32,\n  vars: 3,\n  consts: [[1, \"card-to-do\"], [\"mat-card-avatar\", \"\", 1, \"example-button-container\"], [\"mat-fab\", \"\", \"color\", \"accent\", \"aria-label\", \"Example icon button with a bookmark icon\", 3, \"click\"], [1, \"material-symbols-outlined\"], [1, \"title-text\", 2, \"margin-bottom\", \"10px\"], [\"cols\", \"12\", \"rowHeight\", \"50px\"], [3, \"colspan\"], [2, \"display\", \"grid\"], [\"for\", \"titulo\"], [\"type\", \"text\", \"id\", \"titulo\", \"name\", \"titulo\", \"required\", \"\"], [\"cols\", \"12\", \"rowHeight\", \"150px\"], [\"for\", \"descripcion\"], [\"id\", \"descripcion\", \"name\", \"descripcion\", \"rows\", \"3\", \"maxlength\", \"100\", \"required\", \"\", 1, \"textarea-no-resize\"], [\"mat-fab\", \"\", \"extended\", \"\", 1, \"atom-button\", 3, \"click\"]],\n  template: function TaskFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-card\", 0)(1, \"mat-card-header\")(2, \"div\", 1)(3, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function TaskFormComponent_Template_button_click_3_listener() {\n        return ctx.navigateToDoList();\n      });\n      i0.ɵɵelementStart(4, \"mat-icon\")(5, \"span\", 3);\n      i0.ɵɵtext(6, \" arrow_back \");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelementStart(7, \"mat-card-content\")(8, \"mat-card-title\", 4)(9, \"b\");\n      i0.ɵɵtext(10, \"ToDoApp\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"form\")(12, \"mat-grid-list\", 5)(13, \"mat-grid-tile\", 6)(14, \"div\", 7)(15, \"label\", 8);\n      i0.ɵɵtext(16, \"T\\u00EDtulo:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 9);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(18, \"mat-grid-list\", 10)(19, \"mat-grid-tile\", 6)(20, \"div\", 7)(21, \"label\", 11);\n      i0.ɵɵtext(22, \"Descripci\\u00F3n (m\\u00E1ximo 100 caracteres):\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(23, \"textarea\", 12);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(24, \"mat-grid-list\", 5)(25, \"mat-grid-tile\", 6)(26, \"button\", 13);\n      i0.ɵɵlistener(\"click\", function TaskFormComponent_Template_button_click_26_listener() {\n        return ctx.navigateToDoList();\n      });\n      i0.ɵɵelementStart(27, \"mat-icon\")(28, \"span\", 3);\n      i0.ɵɵtext(29, \" save \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtext(30, \" Guardar \");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelement(31, \"mat-card-actions\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"colspan\", 12);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"colspan\", 12);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"colspan\", 12);\n    }\n  },\n  dependencies: [i2.MatCard, i2.MatCardActions, i2.MatCardAvatar, i2.MatCardContent, i2.MatCardHeader, i2.MatCardTitle, i3.MatFabButton, i4.MatIcon, i5.MatGridList, i5.MatGridTile],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["Validators","TaskFormComponent","constructor","fb","ngOnInit","initForm","taskForm","group","titulo","required","descripcion","maxLength","i0","ɵɵdirectiveInject","i1","FormBuilder","selectors","decls","vars","consts","template","TaskFormComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","TaskFormComponent_Template_button_click_3_listener","navigateToDoList","ɵɵtext","ɵɵelementEnd","ɵɵelement","TaskFormComponent_Template_button_click_26_listener","ɵɵadvance","ɵɵproperty"],"sources":["E:\\Desarrollo de software\\Repositorios\\AtomChallenge\\Frontend\\toDoFront\\src\\app\\tasks\\task-form\\task-form.component.ts","E:\\Desarrollo de software\\Repositorios\\AtomChallenge\\Frontend\\toDoFront\\src\\app\\tasks\\task-form\\task-form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-task-form',\n  templateUrl: './task-form.component.html',\n  styleUrls: ['./task-form.component.css']\n})\nexport class TaskFormComponent implements OnInit{\n  taskForm!: FormGroup;\n\n  constructor(private fb: FormBuilder) {\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  initForm(){\n    this.taskForm = this.fb.group({\n      titulo: ['', [Validators.required]],\n      descripcion: ['', [Validators.required, Validators.maxLength(100)]]\n    });\n  }\n}\n","<mat-card class=\"card-to-do\">\n    <mat-card-header>\n        <div mat-card-avatar class=\"example-button-container\">\n            <button (click)=\"navigateToDoList()\" mat-fab color=\"accent\"\n                aria-label=\"Example icon button with a bookmark icon\">\n                <mat-icon><span class=\"material-symbols-outlined\">\n                        arrow_back\n                    </span></mat-icon>\n            </button>\n        </div>\n    </mat-card-header>\n    <mat-card-content>\n        <mat-card-title class=\"title-text\" style=\"margin-bottom: 10px;\"><b>ToDoApp</b></mat-card-title>\n        <form>\n            <mat-grid-list cols=\"12\" rowHeight=\"50px\">\n                <mat-grid-tile [colspan]=\"12\">\n                    <div style=\"display: grid;\">\n                        <label for=\"titulo\">Título:</label>\n                        <input type=\"text\" id=\"titulo\" name=\"titulo\" required>\n                    </div>\n                </mat-grid-tile>\n            </mat-grid-list>\n            <mat-grid-list cols=\"12\" rowHeight=\"150px\">\n                <mat-grid-tile [colspan]=\"12\">\n                    <div style=\"display: grid;\">\n                        <label for=\"descripcion\">Descripción (máximo 100 caracteres):</label>\n                        <textarea id=\"descripcion\" class=\"textarea-no-resize\" name=\"descripcion\" rows=\"3\" maxlength=\"100\" required></textarea>\n                    </div>\n                </mat-grid-tile>\n            </mat-grid-list>\n            <mat-grid-list cols=\"12\" rowHeight=\"50px\">\n                <mat-grid-tile [colspan]=\"12\">\n                    <button (click)=\"navigateToDoList()\" mat-fab extended class=\"atom-button\">\n                        <mat-icon>\n                            <span class=\"material-symbols-outlined\">\n                                save\n                            </span>\n                        </mat-icon>\n                        Guardar\n                      </button>\n                </mat-grid-tile>\n            </mat-grid-list>\n        </form>\n    </mat-card-content>\n    <mat-card-actions>\n    </mat-card-actions>\n</mat-card>\n"],"mappings":";AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;AAOnE,OAAM,MAAOC,iBAAiB;EAG5BC,YAAoBC,EAAe;IAAf,KAAAA,EAAE,GAAFA,EAAE;EACtB;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACC,QAAQ,EAAE;EACjB;EAEAA,QAAQA,CAAA;IACN,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MAC5BC,MAAM,EAAE,CAAC,EAAE,EAAE,CAACR,UAAU,CAACS,QAAQ,CAAC,CAAC;MACnCC,WAAW,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACW,SAAS,CAAC,GAAG,CAAC,CAAC;KACnE,CAAC;EACJ;;SAfWV,iBAAiB;;mBAAjBA,MAAiB,EAAAW,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA;AAAA;;QAAjBd,MAAiB;EAAAe,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCR9BV,EAAA,CAAAY,cAAA,kBAA6B;MAGTZ,EAAA,CAAAa,UAAA,mBAAAC,mDAAA;QAAA,OAASH,GAAA,CAAAI,gBAAA,EAAkB;MAAA,EAAC;MAEhCf,EAAA,CAAAY,cAAA,eAAU;MACFZ,EAAA,CAAAgB,MAAA,mBACJ;MAAAhB,EAAA,CAAAiB,YAAA,EAAO;MAIvBjB,EAAA,CAAAY,cAAA,uBAAkB;MACqDZ,EAAA,CAAAgB,MAAA,eAAO;MAAAhB,EAAA,CAAAiB,YAAA,EAAI;MAC9EjB,EAAA,CAAAY,cAAA,YAAM;MAI8BZ,EAAA,CAAAgB,MAAA,oBAAO;MAAAhB,EAAA,CAAAiB,YAAA,EAAQ;MACnCjB,EAAA,CAAAkB,SAAA,gBAAsD;MAC1DlB,EAAA,CAAAiB,YAAA,EAAM;MAGdjB,EAAA,CAAAY,cAAA,yBAA2C;MAGNZ,EAAA,CAAAgB,MAAA,sDAAoC;MAAAhB,EAAA,CAAAiB,YAAA,EAAQ;MACrEjB,EAAA,CAAAkB,SAAA,oBAAsH;MAC1HlB,EAAA,CAAAiB,YAAA,EAAM;MAGdjB,EAAA,CAAAY,cAAA,wBAA0C;MAE1BZ,EAAA,CAAAa,UAAA,mBAAAM,oDAAA;QAAA,OAASR,GAAA,CAAAI,gBAAA,EAAkB;MAAA,EAAC;MAChCf,EAAA,CAAAY,cAAA,gBAAU;MAEFZ,EAAA,CAAAgB,MAAA,cACJ;MAAAhB,EAAA,CAAAiB,YAAA,EAAO;MAEXjB,EAAA,CAAAgB,MAAA,iBACF;MAAAhB,EAAA,CAAAiB,YAAA,EAAS;MAK3BjB,EAAA,CAAAkB,SAAA,wBACmB;MACvBlB,EAAA,CAAAiB,YAAA,EAAW;;;MA/BoBjB,EAAA,CAAAoB,SAAA,IAAc;MAAdpB,EAAA,CAAAqB,UAAA,eAAc;MAQdrB,EAAA,CAAAoB,SAAA,GAAc;MAAdpB,EAAA,CAAAqB,UAAA,eAAc;MAQdrB,EAAA,CAAAoB,SAAA,GAAc;MAAdpB,EAAA,CAAAqB,UAAA,eAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}