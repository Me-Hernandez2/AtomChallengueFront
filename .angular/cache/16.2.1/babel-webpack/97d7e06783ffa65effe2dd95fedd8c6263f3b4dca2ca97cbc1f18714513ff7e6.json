{"ast":null,"code":"var _class;\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TaskService {\n  constructor(http) {\n    this.http = http;\n  }\n  addTask(payload) {\n    const url = environment.API_BASE_URL + \"addTask\";\n    return this.http.post(url, payload);\n  }\n  updateTask(payload) {\n    const url = environment.API_BASE_URL + \"updateTask/\" + payload.id;\n    return this.http.put(url, payload);\n  }\n  getAllTasks() {\n    const url = environment.API_BASE_URL + 'getAllTasks';\n    return this.http.get(url);\n  }\n  deleteTask(task) {\n    const url = environment.API_BASE_URL + task.id;\n    return this.http.delete(url);\n  }\n}\n_class = TaskService;\n_class.ɵfac = function TaskService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["environment","TaskService","constructor","http","addTask","payload","url","API_BASE_URL","post","updateTask","id","put","getAllTasks","get","deleteTask","task","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["E:\\Desarrollo de software\\Repositorios\\AtomChallenge\\Frontend\\toDoFront\\src\\services\\tasks\\task.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { environment } from 'src/environments/environment';\nimport { AddResponse, TaskItem } from 'src/app/tasks/interfaces/task.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n\n  constructor(private http: HttpClient) { }\n\n  addTask(payload: TaskItem): Observable<AddResponse> {\n    const url = environment.API_BASE_URL+\"addTask\"\n    return this.http.post<any>(url, payload );\n  }\n\n  updateTask(payload:TaskItem): Observable<AddResponse>{\n      const url = environment.API_BASE_URL+\"updateTask/\"+payload.id\n      return this.http.put<any>(url, payload );\n  }\n\n  getAllTasks(): Observable<TaskItem[]> {\n    const url = environment.API_BASE_URL+'getAllTasks';\n    return this.http.get<any>(url);\n  }\n\n  deleteTask(task: TaskItem): Observable<AddResponse> {\n    const url = environment.API_BASE_URL+task.id\n    return this.http.delete<any>(url);\n  }\n}\n"],"mappings":";AAGA,SAASA,WAAW,QAAQ,8BAA8B;;;AAM1D,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,OAAOA,CAACC,OAAiB;IACvB,MAAMC,GAAG,GAAGN,WAAW,CAACO,YAAY,GAAC,SAAS;IAC9C,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAMF,GAAG,EAAED,OAAO,CAAE;EAC3C;EAEAI,UAAUA,CAACJ,OAAgB;IACvB,MAAMC,GAAG,GAAGN,WAAW,CAACO,YAAY,GAAC,aAAa,GAACF,OAAO,CAACK,EAAE;IAC7D,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAML,GAAG,EAAED,OAAO,CAAE;EAC5C;EAEAO,WAAWA,CAAA;IACT,MAAMN,GAAG,GAAGN,WAAW,CAACO,YAAY,GAAC,aAAa;IAClD,OAAO,IAAI,CAACJ,IAAI,CAACU,GAAG,CAAMP,GAAG,CAAC;EAChC;EAEAQ,UAAUA,CAACC,IAAc;IACvB,MAAMT,GAAG,GAAGN,WAAW,CAACO,YAAY,GAACQ,IAAI,CAACL,EAAE;IAC5C,OAAO,IAAI,CAACP,IAAI,CAACa,MAAM,CAAMV,GAAG,CAAC;EACnC;;SAtBWL,WAAW;;mBAAXA,MAAW,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAXnB,MAAW;EAAAoB,OAAA,EAAXpB,MAAW,CAAAqB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}