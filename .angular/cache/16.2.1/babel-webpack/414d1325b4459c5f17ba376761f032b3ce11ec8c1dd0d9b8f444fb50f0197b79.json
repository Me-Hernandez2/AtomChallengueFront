{"ast":null,"code":"var _class;\nimport { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/services/tasks/task.service\";\nimport * as i3 from \"@angular/material/button\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/icon\";\nimport * as i6 from \"@angular/material/grid-list\";\nimport * as i7 from \"@angular/material/input\";\nexport class TaskFormComponent {\n  constructor(fb, taskService$) {\n    this.fb = fb;\n    this.taskService$ = taskService$;\n    this.updateTaskList = new EventEmitter();\n    this.taskList = [];\n  }\n  ngOnInit() {\n    this.initForm();\n  }\n  initForm() {\n    this.taskForm = this.fb.group({\n      title: ['', [Validators.required]],\n      description: ['', [Validators.required, Validators.maxLength(100)]]\n    });\n  }\n  testSwal() {\n    Swal.fire({\n      title: 'Error!',\n      text: 'Do you want to continue',\n      icon: 'error',\n      confirmButtonText: 'Cool'\n    });\n  }\n  addTask() {\n    const payload = {\n      title: this.taskForm.controls['title'].value,\n      description: this.taskForm.controls['description'].value,\n      status: 0\n    };\n    this.taskService$.addTask(payload).subscribe(res => {\n      if (res.status === 'success') this.updateTaskList.emit(res);\n    });\n  }\n  changueTaskList() {}\n}\n_class = TaskFormComponent;\n_class.ɵfac = function TaskFormComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.TaskService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-task-form\"]],\n  outputs: {\n    updateTaskList: \"updateTaskList\"\n  },\n  decls: 22,\n  vars: 4,\n  consts: [[3, \"formGroup\"], [\"cols\", \"12\", \"rowHeight\", \"50px\"], [3, \"colspan\"], [\"for\", \"titulo\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"title\", \"maxlength\", \"50\", \"name\", \"titulo\", \"required\", \"\"], [\"cols\", \"12\", \"rowHeight\", \"50px\", 1, \"mt-5\"], [\"for\", \"descripcion\"], [\"matInput\", \"\", \"id\", \"descripcion\", \"formControlName\", \"description\", \"rows\", \"3\", \"maxlength\", \"70\", \"required\", \"\"], [\"mat-fab\", \"\", \"extended\", \"\", 1, \"atom-button\", 3, \"click\"], [1, \"material-symbols-outlined\"]],\n  template: function TaskFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"mat-grid-list\", 1)(2, \"mat-grid-tile\", 2)(3, \"mat-form-field\")(4, \"label\", 3);\n      i0.ɵɵtext(5, \"T\\u00EDtulo:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 4);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(7, \"mat-grid-list\", 5)(8, \"mat-grid-tile\", 2)(9, \"mat-form-field\")(10, \"label\", 6);\n      i0.ɵɵtext(11, \"Descripci\\u00F3n:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"p\");\n      i0.ɵɵtext(14, \"(m\\u00E1ximo 70 caracteres)\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(15, \"mat-grid-list\", 5)(16, \"mat-grid-tile\", 2)(17, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function TaskFormComponent_Template_button_click_17_listener() {\n        return ctx.addTask();\n      });\n      i0.ɵɵelementStart(18, \"mat-icon\")(19, \"span\", 9);\n      i0.ɵɵtext(20, \" save \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtext(21, \" Agregar Tarea \");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.taskForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"colspan\", 12);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"colspan\", 12);\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"colspan\", 12);\n    }\n  },\n  dependencies: [i3.MatFabButton, i4.MatFormField, i5.MatIcon, i6.MatGridList, i6.MatGridTile, i7.MatInput, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\".mat-mdc-form-field {\\n    display: block !important;\\n  } \\n\\n    .mat-grid-tile-content {\\n    display: block !important;\\n  }\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdGFza3MvdGFzay1mb3JtL3Rhc2stZm9ybS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJFQUFFO0lBQ0UseUJBQXlCO0VBQzNCOztFQUVBO0lBQ0UseUJBQXlCO0VBQzNCIiwic291cmNlc0NvbnRlbnQiOlsiICA6Om5nLWRlZXAgLm1hdC1tZGMtZm9ybS1maWVsZCB7XHJcbiAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xyXG4gIH0gXHJcblxyXG4gIDo6bmctZGVlcCAubWF0LWdyaWQtdGlsZS1jb250ZW50IHtcclxuICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7XHJcbiAgfVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"names":["EventEmitter","Validators","Swal","TaskFormComponent","constructor","fb","taskService$","updateTaskList","taskList","ngOnInit","initForm","taskForm","group","title","required","description","maxLength","testSwal","fire","text","icon","confirmButtonText","addTask","payload","controls","value","status","subscribe","res","emit","changueTaskList","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","TaskService","selectors","outputs","decls","vars","consts","template","TaskFormComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","TaskFormComponent_Template_button_click_17_listener","ɵɵproperty","ɵɵadvance"],"sources":["E:\\Desarrollo de software\\Repositorios\\AtomChallenge\\Frontend\\toDoFront\\src\\app\\tasks\\task-form\\task-form.component.ts","E:\\Desarrollo de software\\Repositorios\\AtomChallenge\\Frontend\\toDoFront\\src\\app\\tasks\\task-form\\task-form.component.html"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { TaskService } from 'src/services/tasks/task.service';\nimport Swal from 'sweetalert2'\nimport { AddResponse, TaskItem } from '../interfaces/task.interface';\n\n@Component({\n  selector: 'app-task-form',\n  templateUrl: './task-form.component.html',\n  styleUrls: ['./task-form.component.css']\n})\nexport class TaskFormComponent implements OnInit{\n  @Output () updateTaskList: EventEmitter<AddResponse> = new EventEmitter();\n  taskForm!: FormGroup;\n  taskList: TaskItem[] = []\n  constructor(private fb: FormBuilder,\n              private taskService$: TaskService) {\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  initForm(){\n    this.taskForm = this.fb.group({\n      title: ['', [Validators.required]],\n      description: ['', [Validators.required, Validators.maxLength(100)]]\n    });\n  }\n\n  testSwal(){\n    Swal.fire({\n      title: 'Error!',\n      text: 'Do you want to continue',\n      icon: 'error',\n      confirmButtonText: 'Cool'\n    })\n  }\n\n  addTask(){\n      const payload : TaskItem = {\n        title: this.taskForm.controls['title'].value,\n        description: this.taskForm.controls['description'].value,\n        status: 0\n      }\n      this.taskService$.addTask(payload).subscribe( (res:AddResponse) => {\n        if(res.status === 'success')\n        this.updateTaskList.emit(res)\n      })\n  }\n\n  changueTaskList(){\n    \n  }\n\n \n  \n}\n","<form [formGroup]=\"taskForm\">\n    <mat-grid-list cols=\"12\" rowHeight=\"50px\">\n        <mat-grid-tile [colspan]=\"12\">\n            <mat-form-field>\n                <label for=\"titulo\" >Título:</label>\n                <input  matInput type=\"text\" formControlName=\"title\" maxlength=\"50\" name=\"titulo\" required>\n            </mat-form-field>\n        </mat-grid-tile>\n    </mat-grid-list>\n    <mat-grid-list cols=\"12\" rowHeight=\"50px\" class=\"mt-5\">\n        <mat-grid-tile [colspan]=\"12\">\n            <mat-form-field>\n                <label for=\"descripcion\">Descripción:</label>\n                <input  matInput id=\"descripcion\" formControlName=\"description\" rows=\"3\" maxlength=\"70\" required>\n                \n        </mat-form-field>\n        <p>(máximo 70 caracteres)</p>\n        </mat-grid-tile>\n    </mat-grid-list>\n    <mat-grid-list cols=\"12\" rowHeight=\"50px\" class=\"mt-5\">\n        <mat-grid-tile [colspan]=\"12\">\n            <button (click)=\"addTask()\" mat-fab extended class=\"atom-button\">\n                <mat-icon>\n                    <span class=\"material-symbols-outlined\">\n                        save\n                    </span>\n                </mat-icon>\n                Agregar Tarea\n              </button>\n        </mat-grid-tile>\n    </mat-grid-list>\n</form>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}