{"ast":null,"code":"var _class;\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nexport class ToastService {\n  constructor() {\n    this.toastQueue = [];\n    this.isShowingToast = false;\n  }\n  showToast(icon, message) {\n    this.toastQueue.push(message);\n    // Si no se está mostrando un Toast actualmente, mostrar el siguiente de la cola\n    if (!this.isShowingToast) {\n      this.isShowingToast = true;\n      this.showNextToast(icon);\n    }\n  }\n  showNextToast(icon) {\n    if (this.toastQueue.length > 0) {\n      const message = this.toastQueue.shift();\n      const Toast = Swal.mixin({\n        toast: true,\n        position: 'top-end',\n        showConfirmButton: false,\n        timer: 3000,\n        timerProgressBar: true\n      });\n      Toast.fire({\n        icon,\n        title: message\n      }).then(() => {\n        // Una vez que se cierra el Toast actual, mostrar el siguiente si existe en la cola\n        this.isShowingToast = false;\n        this.showNextToast(icon);\n      });\n    }\n  }\n}\n_class = ToastService;\n_class.ɵfac = function ToastService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Swal","ToastService","constructor","toastQueue","isShowingToast","showToast","icon","message","push","showNextToast","length","shift","Toast","mixin","toast","position","showConfirmButton","timer","timerProgressBar","fire","title","then","factory","ɵfac","providedIn"],"sources":["E:\\Desarrollo de software\\Repositorios\\AtomChallenge\\Frontend\\toDoFront\\src\\services\\toast\\toast.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport Swal, { SweetAlertIcon } from 'sweetalert2'\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToastService {\n  private toastQueue: string[] = [];\n  private isShowingToast = false;\n  constructor() {}\n\n  showToast(icon: 'success' | 'error', message: string) {\n    this.toastQueue.push(message);\n\n    // Si no se está mostrando un Toast actualmente, mostrar el siguiente de la cola\n    if (!this.isShowingToast) {\n      this.isShowingToast = true;\n      this.showNextToast(icon);\n    }\n  }\n\n  private showNextToast(icon: 'success' | 'error') {\n    if (this.toastQueue.length > 0) {\n      const message = this.toastQueue.shift();\n\n      const Toast = Swal.mixin({\n        toast: true,\n        position: 'top-end',\n        showConfirmButton: false,\n        timer: 3000,\n        timerProgressBar: true\n      });\n\n      Toast.fire({\n        icon,\n        title: message\n      }).then(() => {\n        // Una vez que se cierra el Toast actual, mostrar el siguiente si existe en la cola\n        this.isShowingToast = false;\n        this.showNextToast(icon);\n      });\n    }\n  }\n}\n"],"mappings":";AACA,OAAOA,IAAwB,MAAM,aAAa;;AAMlD,OAAM,MAAOC,YAAY;EAGvBC,YAAA;IAFQ,KAAAC,UAAU,GAAa,EAAE;IACzB,KAAAC,cAAc,GAAG,KAAK;EACf;EAEfC,SAASA,CAACC,IAAyB,EAAEC,OAAe;IAClD,IAAI,CAACJ,UAAU,CAACK,IAAI,CAACD,OAAO,CAAC;IAE7B;IACA,IAAI,CAAC,IAAI,CAACH,cAAc,EAAE;MACxB,IAAI,CAACA,cAAc,GAAG,IAAI;MAC1B,IAAI,CAACK,aAAa,CAACH,IAAI,CAAC;;EAE5B;EAEQG,aAAaA,CAACH,IAAyB;IAC7C,IAAI,IAAI,CAACH,UAAU,CAACO,MAAM,GAAG,CAAC,EAAE;MAC9B,MAAMH,OAAO,GAAG,IAAI,CAACJ,UAAU,CAACQ,KAAK,EAAE;MAEvC,MAAMC,KAAK,GAAGZ,IAAI,CAACa,KAAK,CAAC;QACvBC,KAAK,EAAE,IAAI;QACXC,QAAQ,EAAE,SAAS;QACnBC,iBAAiB,EAAE,KAAK;QACxBC,KAAK,EAAE,IAAI;QACXC,gBAAgB,EAAE;OACnB,CAAC;MAEFN,KAAK,CAACO,IAAI,CAAC;QACTb,IAAI;QACJc,KAAK,EAAEb;OACR,CAAC,CAACc,IAAI,CAAC,MAAK;QACX;QACA,IAAI,CAACjB,cAAc,GAAG,KAAK;QAC3B,IAAI,CAACK,aAAa,CAACH,IAAI,CAAC;MAC1B,CAAC,CAAC;;EAEN;;SApCWL,YAAY;;mBAAZA,MAAY;AAAA;;SAAZA,MAAY;EAAAqB,OAAA,EAAZrB,MAAY,CAAAsB,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}