{"ast":null,"code":"var _class;\nimport { HttpResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/services/toast/toast.service\";\n/** Pass untouched request through to the next request handler. */\nexport class RequestInterceptor {\n  constructor(toastService$) {\n    this.toastService$ = toastService$;\n  }\n  intercept(req, next) {\n    return next.handle(req).pipe(tap(event => {\n      if (event instanceof HttpResponse) {\n        console.log(event);\n        this.toastService$.showToast('success', event.body.message); // Maneja la respuesta exitosa\n      }\n    }), catchError(error => {\n      console.error('La petición falló', error); // Maneja los errores\n      return throwError(error); // Propaga el error para que el componente que hizo la petición también lo maneje\n    }));\n  }\n}\n_class = RequestInterceptor;\n_class.ɵfac = function RequestInterceptor_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.ToastService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"names":["HttpResponse","throwError","catchError","tap","RequestInterceptor","constructor","toastService$","intercept","req","next","handle","pipe","event","console","log","showToast","body","message","error","i0","ɵɵinject","i1","ToastService","factory","ɵfac"],"sources":["E:\\Desarrollo de software\\Repositorios\\AtomChallenge\\Frontend\\toDoFront\\src\\app\\interceptors\\http.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n    HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpResponse\r\n} from '@angular/common/http';\r\n\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { ToastService } from 'src/services/toast/toast.service';\r\n\r\n/** Pass untouched request through to the next request handler. */\r\n@Injectable()\r\nexport class RequestInterceptor implements HttpInterceptor {\r\n\r\n    constructor(\r\n        private toastService$: ToastService,\r\n        //private loadingService: LoadingService\r\n      ) {}\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler):\r\n        Observable<HttpEvent<any>> {\r\n        return next.handle(req).pipe(\r\n            tap((event: HttpEvent<any>) => {\r\n                if (event instanceof HttpResponse) {\r\n                    console.log(event);\r\n                    this.toastService$.showToast('success',event.body.message); // Maneja la respuesta exitosa\r\n                }\r\n            }),\r\n            catchError((error) => {\r\n                console.error('La petición falló', error); // Maneja los errores\r\n                return throwError(error); // Propaga el error para que el componente que hizo la petición también lo maneje\r\n            })\r\n        );\r\n    }\r\n}"],"mappings":";AACA,SAC0DA,YAAY,QAC/D,sBAAsB;AAE7B,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAGhD;AAEA,OAAM,MAAOC,kBAAkB;EAE3BC,YACYC,aAA2B;IAA3B,KAAAA,aAAa,GAAbA,aAAa;EAEpB;EAELC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAE9C,OAAOA,IAAI,CAACC,MAAM,CAACF,GAAG,CAAC,CAACG,IAAI,CACxBR,GAAG,CAAES,KAAqB,IAAI;MAC1B,IAAIA,KAAK,YAAYZ,YAAY,EAAE;QAC/Ba,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClB,IAAI,CAACN,aAAa,CAACS,SAAS,CAAC,SAAS,EAACH,KAAK,CAACI,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;;IAEpE,CAAC,CAAC,EACFf,UAAU,CAAEgB,KAAK,IAAI;MACjBL,OAAO,CAACK,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC,CAAC,CAAC;MAC3C,OAAOjB,UAAU,CAACiB,KAAK,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,CACL;EACL;;SArBSd,kBAAkB;;mBAAlBA,MAAkB,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA;AAAA;;SAAlBlB,MAAkB;EAAAmB,OAAA,EAAlBnB,MAAkB,CAAAoB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}